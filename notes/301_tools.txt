Создание простых инструментов
-------------------------------------
можно создать собственный поток данных
с помошью функции fopen с указателем на файл(FILE)
FILE *in_file = fopen("input.txt", "r");
FILE *out_file = fopen("output.txt", "w");
* r считывать
* w записывать
* a добавлять
Печать в файл
fprintf(out_file, "Не одевайте %s в сочетании %s", "красное", "зелёным");
Прочитать данные из файла
fscanf(in_file, "%79[^\n]\n", sentence);
Закрыть поток данных
fclose(in_file);
fclose(out_file);
==================================
в функцию main
могут быть переданы аргументы
int main(int argc, char *argv[]){...
./programm argument1 argument2 ...
* при передаче считают с 1го: argv[1], argv[2] ...
* в качестве первого аргумента выступает имя запускаемой программы
argv[0]
* все аргументы передаются в массиве, int argc это длина этого массива
--------------------------------------
Передача параметров программе
для более простой работы с аргументами, используют библиотеку getopt(). при каждом вызове возвращает следующий параметр, который найдет в командной строке.

Например есть прога:
rocket_to -e 4 -a Brazil Tokyo London
где
e -  количество двигателей
а - включчает\отключает режим

далее в программе
#include <inistd.h> -не си библиотека, доет доступ к некоторым POSIX методам
...
while((ch = getopt(argc, argv, "ae:") !=EOF)
  код для обработки каждого параметра
  switch(ch){
    ...
    case 'e':
      engine_count = optarg:
    ...
  }
*POSIX набор функций в операционных системах
*символ е, за которым следует :. говорит getopts(), что за е должен следовать дополнительный аргумент, на который быдет указывать переменная optarg, в результате, массив argv будет Brazil-argv[0],Tokyo-argv[1], London-argv[2]

------------------------------------------------
если аргумент сминусом?
./set_temperature -c -- -4
*-- прекращает считывание параметров, остальное считывается как аргументы
